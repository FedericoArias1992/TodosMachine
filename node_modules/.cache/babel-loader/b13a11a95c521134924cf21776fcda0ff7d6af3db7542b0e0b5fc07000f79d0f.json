{"ast":null,"code":"var _jsxFileName = \"/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/BackgroundImage.js\",\n  _s = $RefreshSig$();\n// BackgroundImage.js\nimport './styles.css';\nimport { TodoCounter } from './TodoCounter';\nimport { TodoSearch } from './TodoSearch';\nimport { TodoList } from './TodoList';\nimport { TodoItem } from './TodoItem';\nimport { CreateTodoButton } from './CreateTodoButton';\nimport React, { useState } from \"react\"; //Los estados deben estar en el componente papa y ser pasados al componente hijo\n\n// const array = [{tarea:'Estudiar 30 minutos al dia', estado:'Pendiente'},\n//               {tarea:'Dormir 8 horas al dia', estado:'Pendiente'},\n//               {tarea:'Tomar mate una vez por dia', estado:'Completado'},\n//               {tarea:'Ir al Sauna', estado:'Pendiente'},\n//               {tarea:'Pestañear', estado:'Completado'}\n// ];\n\n//Vamos a usar localstorage para tener persistencia de datos, sin usar base de datos relacional ni no relacionales\n//let stringifiedArray = localStorage.setItem('Version_1', JSON.stringify(array)); -> para inicializar la version_1 del Localstorage\n//Ademas creamos un customHook para manejar todo lo relacionado a localStorage\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet localstoragedArray = localStorage.getItem('Version_1');\nlet parsedArray;\nfunction useLocalStorage() {\n  if (!localstoragedArray) {\n    localStorage.setItem('Version_1', JSON.stringify([])); //si Version_1 (primera vez que se abre la app) = Vacio -> array vacio, pq si no hay que mostrar, la app crashea!\n    parsedArray = [];\n  } else {\n    parsedArray = JSON.parse(localstoragedArray);\n  }\n}\n\n//Componente React\nconst BackgroundImage = () => {\n  _s();\n  let [search, setSearch] = useState(\"\");\n  let [todos, setTodos] = useState(parsedArray);\n\n  //Funcion para obtener la estadistica de cantidad de completados y totales\n  const reducedResult = todos.reduce((accumulator, currentTask) => {\n    accumulator.totalTasks++;\n    if (currentTask.estado === 'Completado') {\n      accumulator.completedTasks++;\n    }\n    return accumulator;\n  }, {\n    totalTasks: 0,\n    completedTasks: 0\n  });\n\n  // Filtra el array 'todos' basado en el valor de 'search'\n  const filteredTodos = todos.filter(todo => {\n    // Verifica si la tarea incluye la palabra introducida en 'search'\n    return todo.tarea.toLowerCase().includes(search.toLowerCase());\n  });\n\n  //Creamos la funcion para actualizar el estado del todo a completado para pasarselo al todoItem tal que al presionar el\n  //icono de tickeado aparezca completado\n  const CompletarTodo = tarea => {\n    const newTodos = [...todos]; //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(todo => todo.tarea === tarea);\n    newTodos[todoIndex].estado = \"Completado\"; //cambiamos el estado del todo apretado\n    //setTodos(newTodos); -> antes de usar localstorage\n    saveStateTodos(newTodos);\n  };\n  //Creamos la funcion para actualizar el estado del vector todos a eliminar el todo al presionar el icono cancel en el todoItem\n  const eliminarTodo = tarea => {\n    let newTodos = [...todos]; //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(todo => todo.tarea === tarea);\n    if (todoIndex !== -1) {\n      newTodos.splice(todoIndex, 1); // Eliminamos el elemento en el índice todoIndex\n      //setTodos(newTodos); // Actualizamos el estado con el nuevo array sin el elemento; -> antes de usar localstorage\n      saveStateTodos(newTodos);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background-image\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-list-container\",\n      children: [/*#__PURE__*/_jsxDEV(TodoCounter, {\n        tasks: reducedResult.totalTasks,\n        completed: reducedResult.completedTasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoSearch, {\n        search: search,\n        setSearch: setSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), filteredTodos.map(todo =>\n      /*#__PURE__*/\n      //usamos el estado inicial de los todos para renderizarlos\n      _jsxDEV(TodoItem, {\n        texto: todo.tarea,\n        state: todo.estado,\n        onComplete: () => CompletarTodo(todo.tarea),\n        onDelete: () => eliminarTodo(todo.tarea)\n      }, todo.tarea, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(TodoList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CreateTodoButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(BackgroundImage, \"6m8ErSLd+0OueemkXQxF/AOckRM=\");\n_c = BackgroundImage;\nexport default BackgroundImage;\nvar _c;\n$RefreshReg$(_c, \"BackgroundImage\");","map":{"version":3,"names":["TodoCounter","TodoSearch","TodoList","TodoItem","CreateTodoButton","React","useState","jsxDEV","_jsxDEV","localstoragedArray","localStorage","getItem","parsedArray","useLocalStorage","setItem","JSON","stringify","parse","BackgroundImage","_s","search","setSearch","todos","setTodos","reducedResult","reduce","accumulator","currentTask","totalTasks","estado","completedTasks","filteredTodos","filter","todo","tarea","toLowerCase","includes","CompletarTodo","newTodos","todoIndex","findIndex","saveStateTodos","eliminarTodo","splice","className","children","tasks","completed","fileName","_jsxFileName","lineNumber","columnNumber","map","texto","state","onComplete","onDelete","_c","$RefreshReg$"],"sources":["/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/BackgroundImage.js"],"sourcesContent":["// BackgroundImage.js\nimport './styles.css';\nimport { TodoCounter } from './TodoCounter';\nimport { TodoSearch } from './TodoSearch';  \nimport { TodoList } from './TodoList';\nimport { TodoItem } from './TodoItem';\nimport { CreateTodoButton } from './CreateTodoButton';\nimport React, { useState } from \"react\"; //Los estados deben estar en el componente papa y ser pasados al componente hijo\n\n\n// const array = [{tarea:'Estudiar 30 minutos al dia', estado:'Pendiente'},\n//               {tarea:'Dormir 8 horas al dia', estado:'Pendiente'},\n//               {tarea:'Tomar mate una vez por dia', estado:'Completado'},\n//               {tarea:'Ir al Sauna', estado:'Pendiente'},\n//               {tarea:'Pestañear', estado:'Completado'}\n// ];\n\n//Vamos a usar localstorage para tener persistencia de datos, sin usar base de datos relacional ni no relacionales\n//let stringifiedArray = localStorage.setItem('Version_1', JSON.stringify(array)); -> para inicializar la version_1 del Localstorage\n//Ademas creamos un customHook para manejar todo lo relacionado a localStorage\nlet localstoragedArray = localStorage.getItem('Version_1');\nlet parsedArray;\n\nfunction useLocalStorage(){\n  \n  if (!localstoragedArray) {\n    localStorage.setItem('Version_1',JSON.stringify([]));  //si Version_1 (primera vez que se abre la app) = Vacio -> array vacio, pq si no hay que mostrar, la app crashea!\n    parsedArray = [];\n  } else {\n    parsedArray = JSON.parse(localstoragedArray);\n  }\n  \n}\n\n\n//Componente React\nconst BackgroundImage = () => {\n  let [search, setSearch] = useState(\"\");\n  let [todos, setTodos]= useState(parsedArray);\n\n  //Funcion para obtener la estadistica de cantidad de completados y totales\n  const reducedResult = todos.reduce((accumulator, currentTask) => {\n  accumulator.totalTasks++;\n  if (currentTask.estado === 'Completado') {\n    accumulator.completedTasks++;\n  }\n  return accumulator;\n  }, { totalTasks: 0, completedTasks: 0 });\n\n  // Filtra el array 'todos' basado en el valor de 'search'\n  const filteredTodos = todos.filter(todo => {\n    // Verifica si la tarea incluye la palabra introducida en 'search'\n    return todo.tarea.toLowerCase().includes(search.toLowerCase());\n  });\n\n  //Creamos la funcion para actualizar el estado del todo a completado para pasarselo al todoItem tal que al presionar el\n  //icono de tickeado aparezca completado\n  const CompletarTodo = (tarea) => {\n    const newTodos = [...todos];  //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(\n      (todo) => todo.tarea === tarea);\n    newTodos[todoIndex].estado = \"Completado\";  //cambiamos el estado del todo apretado\n    //setTodos(newTodos); -> antes de usar localstorage\n    saveStateTodos(newTodos);\n  }\n  //Creamos la funcion para actualizar el estado del vector todos a eliminar el todo al presionar el icono cancel en el todoItem\n  const eliminarTodo =(tarea) => {\n    let newTodos = [...todos];  //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(\n      (todo) => todo.tarea === tarea);\n    if (todoIndex !== -1) {\n      newTodos.splice(todoIndex, 1); // Eliminamos el elemento en el índice todoIndex\n      //setTodos(newTodos); // Actualizamos el estado con el nuevo array sin el elemento; -> antes de usar localstorage\n      saveStateTodos(newTodos);\n    }\n  }\n\n  return (\n    <div className=\"background-image\">\n      <div className=\"todo-list-container\"> \n        <TodoCounter tasks={reducedResult.totalTasks} completed={reducedResult.completedTasks}/>\n        <TodoSearch \n          search={search} setSearch={setSearch}\n        />\n        <TodoList />\n          {filteredTodos.map(todo => (    //usamos el estado inicial de los todos para renderizarlos\n            <TodoItem key={todo.tarea} texto={todo.tarea} state={todo.estado} \n              onComplete={()=> CompletarTodo(todo.tarea)}\n              onDelete={()=> eliminarTodo(todo.tarea)}\n            />\n          ))}\n        <TodoList />\n        <CreateTodoButton />\n      </div>\n    </div>\n  );\n};\n\nexport default BackgroundImage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}