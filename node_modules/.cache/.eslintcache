[{"/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/index.js":"1","/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/Hooks/useLocalStorage.js":"2","/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/components/TodoCounter.jsx":"3","/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/components/TodoList.jsx":"4","/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/components/TodoSearch.jsx":"5","/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/components/TodoItem.jsx":"6","/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/components/CreateTodoButton.jsx":"7","/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/App/index.js":"8","/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/App/AppUI.js":"9","/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/components/EmptyTodos.jsx":"10"},{"size":207,"mtime":1692896700739,"results":"11","hashOfConfig":"12"},{"size":1909,"mtime":1692896700729,"results":"13","hashOfConfig":"12"},{"size":210,"mtime":1692896700739,"results":"14","hashOfConfig":"12"},{"size":131,"mtime":1692896700739,"results":"15","hashOfConfig":"12"},{"size":251,"mtime":1692896700739,"results":"16","hashOfConfig":"12"},{"size":664,"mtime":1692896700739,"results":"17","hashOfConfig":"12"},{"size":227,"mtime":1692896700739,"results":"18","hashOfConfig":"12"},{"size":4257,"mtime":1692896700729,"results":"19","hashOfConfig":"12"},{"size":1775,"mtime":1692896700729,"results":"20","hashOfConfig":"12"},{"size":198,"mtime":1692896700739,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sjf7ve",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/index.js",[],[],"/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/Hooks/useLocalStorage.js",["56"],[],"import { useState, useEffect } from \"react\";\n//Vamos a usar localstorage para tener persistencia de datos, sin usar base de datos relacional ni no relacionales\n//let stringifiedArray = localStorage.setItem('Version_1', JSON.stringify(array)); //-> para inicializar la version_1 del Localstorage\n//tambien vamos a crear un customhook para manejar todo lo relacionado a localstorage:\n//necesitamos la funcion que actualice el estado de los elementos y a la vez el localstorage tal que exista persistencia de datos\n\nfunction useLocalStorage(initialValue){\n  const [item, setItem] = useState(initialValue); //asignamos el valor vacio o inicial al estado del customhook\n  const [error, setError] = useState(false);     //creamos un estado para saber si hubo o no error en el renderizado\n  useEffect(() => {\n    try {\n      let localstoragedArray = localStorage.getItem('Version_1');\n      let parsedArray;\n      if (!localstoragedArray) {\n        localStorage.setItem('Version_1',JSON.stringify(initialValue));  //si Version_1 (primera vez que se abre la app) = Vacio -> array vacio, pq si no hay que mostrar, la app crashea!\n        parsedArray = [];\n      } else {\n        parsedArray = JSON.parse(localstoragedArray);\n        setItem(parsedArray); //asignamos el valor vacio o inicial al estado del customhook\n      }\n    } catch (error) {\n      setError(true);\n    }\n  }, []);\n  \n     //al refrescar la pagina:\n    const saveStateTodos = (newTodos) => {\n      localStorage.setItem('Version_1', JSON.stringify(newTodos));  //reescribimos el array de todos actualizado\n      setItem(newTodos);\n    }\n    return [item, saveStateTodos, error];  //saveStateTodos es el estados de los array persistente de todos, item es la lista de todos parseada\n  }                                 //con esta desestructuracion de arrays como devolucion del customhook, ya podemos usar saveStateTodos()\n  \nexport {useLocalStorage};","/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/components/TodoCounter.jsx",[],[],"/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/components/TodoList.jsx",[],[],"/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/components/TodoSearch.jsx",[],[],"/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/components/TodoItem.jsx",["57"],[],"import checkIcon  from './icons8-done.svg';\nimport cancelIcon from './icons8-cancel.svg';\nimport React, { useState } from \"react\"; //Los estados deben estar en el componente papa y ser pasados al componente hijo\n\nfunction TodoItem( { texto, state, todo, setTodos, onComplete, onDelete }){\n  return (\n    <li className={`todo-item ${state === 'Pendiente' ? 'tarea-pendiente' : 'tarea-completada'}`}>\n      <img className=\"checked-icon\" src={checkIcon} alt=\"Check Icon\" onClick={onComplete}/>\n      <p>{ texto }</p>\n      <p>{ state }</p>\n      <img className=\"cancel-icon\" src={cancelIcon} alt=\"Cancel Icon\" onClick={onDelete}/>\n    </li>\n  );\n}\nexport { TodoItem }","/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/components/CreateTodoButton.jsx",[],[],"/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/App/index.js",["58"],[],"import react from 'react';\n//import './App.css';\nimport { AppUI } from './AppUI';\nimport { useLocalStorage } from '../Hooks/useLocalStorage';\nimport React, { useState, useEffect } from \"react\"; //Los estados deben estar en el componente papa y ser pasados al componente hijo\n\n// const array = [{tarea:'Estudiar 30 minutos al dia', estado:'Pendiente'},\n//               {tarea:'Dormir 8 horas al dia', estado:'Pendiente'},\n//               {tarea:'Tomar mate una vez por dia', estado:'Completado'},\n//               {tarea:'Ir al Sauna', estado:'Pendiente'},\n//               {tarea:'Pestañear', estado:'Completado'},\n//               {tarea:'Terminar el Curso de React', estado:'Pendiente'},\n//               {tarea:'Comer la comida', estado:'Completado'},\n//               {tarea:'Reparar mi vida!', estado:'Pendiente'},\n//               {tarea:'Reposar las costillas', estado:'Pendiente'},\n// ]; ->  dsps en consola: localStorage.setItem('Version_1',JSON.stringify(array));\n\n//Componente React\nfunction App () {\n  let [search, setSearch] = useState(\"\");\n  let [todos, saveStateTodos, error]= useLocalStorage([]);\n      //console.log(todos[0]);  -> tarea + estado_tarea\n      //console.log(typeof saveStateTodos); //->function -> es el customhook\n  //Funcion para obtener la estadistica de cantidad de completados y totales\n  const reducedResult = todos.reduce((accumulator, currentTask) => {\n  accumulator.totalTasks++;\n  if (currentTask.estado === 'Completado') {\n    accumulator.completedTasks++;\n  }\n  return accumulator;\n  }, { totalTasks: 0, completedTasks: 0 });\n\n  // Filtra el array 'todos' basado en el valor de 'search'\n  const filteredTodos = todos.filter(todo => {\n    // Verifica si la tarea incluye la palabra introducida en 'search'\n    return todo.tarea.toLowerCase().includes(search.toLowerCase());\n  });\n\n  //Creamos la funcion para actualizar el estado del todo a completado para pasarselo al todoItem tal que al presionar el\n  //icono de tickeado aparezca completado\n  const CompletarTodo = (tarea) => {\n    const newTodos = [...todos];  //creamos una copia del array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(\n      (todo) => todo.tarea === tarea);\n    newTodos[todoIndex].estado = \"Completado\";  //cambiamos el estado del todo apretado\n    //setTodos(newTodos); -> antes de usar localstorage\n    saveStateTodos(newTodos);   //persistimos el cambio con localstorage\n  }\n  //Creamos la funcion para actualizar el estado del vector todos a eliminar el todo al presionar el icono cancel en el todoItem\n  const eliminarTodo =(tarea) => {\n    let newTodos = [...todos];  //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(\n      (todo) => todo.tarea === tarea);\n    if (todoIndex !== -1) {\n      newTodos.splice(todoIndex, 1); // Eliminamos el elemento en el índice todoIndex\n      //setTodos(newTodos); // Actualizamos el estado con el nuevo array sin el elemento; -> antes de usar localstorage\n      saveStateTodos(newTodos);\n    }\n  }\n  //Vamos a crear un customHook para obtener una frase motivacional y renderizarla:\n  const [motivationalQuote, setMotivationalQuote] = useState(\"\");\n\n  useEffect(() => {\n    // Función asincrónica para obtener la frase motivacional\n    async function fetchMotivationalQuote() {\n      try {\n        const response = await fetch(\"https://zenquotes.io/api/random\");\n        const data = await response.json();\n        //console.log(data[0]?.q);\n        const quote = data[0]?.q; // Obtenemos la cita desde la respuesta\n        setMotivationalQuote(quote);\n      } catch (error) {\n        console.error(\"Error al obtener la frase motivacional:\", error);\n      }\n    }\n    // Llamamos a la función para obtener la frase motivacional cuando el componente se monta\n    fetchMotivationalQuote();\n  }, []);\n  \n\n//Vamos a usar otro archivo para la interfaz\n  return (\n    <AppUI \n      reducedResult = {reducedResult}\n      search = {search}\n      setSearch = {setSearch}\n      filteredTodos = {filteredTodos}\n      CompletarTodo = {CompletarTodo}\n      eliminarTodo = {eliminarTodo}\n      motivationalQuote = {motivationalQuote}\n      error ={error}\n    />\n\n  );\n\n};\n\nexport default App;\n","/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/App/AppUI.js",["59","60"],[],"import '../styles.css';\nimport { TodoCounter } from '../components/TodoCounter';\nimport { TodoSearch } from '../components/TodoSearch';  \nimport { TodoList } from '../components/TodoList';\nimport { TodoItem } from '../components/TodoItem';\nimport { CreateTodoButton } from '../components/CreateTodoButton';\nimport {EmptyTodos} from '../components/EmptyTodos'\nimport React, { useState, useEffect } from \"react\"; //Los estados deben estar en el componente papa y ser pasados al componente hijo\n\n\nfunction AppUI ({\n  reducedResult,\n  search,\n  setSearch,\n  filteredTodos,\n  CompletarTodo,\n  eliminarTodo,\n  motivationalQuote,\n  error\n})\n{\nreturn (\n  <div className=\"first-container\">\n  <div className=\"background-image\">\n    <div className=\"app-container\">\n      <div className=\"inspirational-quote\">\n        <h1>Frase del día:</h1>\n        {motivationalQuote ? (\n          <h2>{motivationalQuote}</h2>\n        ) : (\n          <h2>Loading...</h2>\n        )}\n      </div>\n      <div className=\"todo-list-container\"> \n        <TodoCounter tasks={reducedResult.totalTasks} completed={reducedResult.completedTasks}/>\n        <TodoSearch \n          search={search} setSearch={setSearch}\n        />\n        <TodoList />\n          {error && <h1>Hubo un error al cargar los Todos!</h1>}\n          {(filteredTodos.length ===0) && <EmptyTodos />}\n          {filteredTodos.map(todo => (    //usamos el estado inicial de los todos para renderizarlos\n            <TodoItem key={todo.tarea} texto={todo.tarea} state={todo.estado} \n              onComplete={()=> CompletarTodo(todo.tarea)}\n              onDelete={()=> eliminarTodo(todo.tarea)}\n            />\n          ))}\n        <TodoList />\n        <CreateTodoButton />\n      </div>\n    </div>\n  </div>\n  </div>\n  );\n};\n\nexport { AppUI };","/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/components/EmptyTodos.jsx",[],[],{"ruleId":"61","severity":1,"message":"62","line":24,"column":6,"nodeType":"63","endLine":24,"endColumn":8,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":3,"column":17,"nodeType":"67","messageId":"68","endLine":3,"endColumn":25},{"ruleId":"65","severity":1,"message":"69","line":1,"column":8,"nodeType":"67","messageId":"68","endLine":1,"endColumn":13},{"ruleId":"65","severity":1,"message":"66","line":8,"column":17,"nodeType":"67","messageId":"68","endLine":8,"endColumn":25},{"ruleId":"65","severity":1,"message":"70","line":8,"column":27,"nodeType":"67","messageId":"68","endLine":8,"endColumn":36},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initialValue'. Either include it or remove the dependency array.","ArrayExpression",["71"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'react' is defined but never used.","'useEffect' is defined but never used.",{"desc":"72","fix":"73"},"Update the dependencies array to be: [initialValue]",{"range":"74","text":"75"},[1371,1373],"[initialValue]"]