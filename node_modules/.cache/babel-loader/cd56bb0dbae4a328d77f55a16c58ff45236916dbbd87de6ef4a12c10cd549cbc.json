{"ast":null,"code":"var _jsxFileName = \"/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/BackgroundImage.js\",\n  _s = $RefreshSig$();\n// BackgroundImage.js\nimport './styles.css';\nimport { TodoCounter } from './TodoCounter';\nimport { TodoSearch } from './TodoSearch';\nimport { TodoList } from './TodoList';\nimport { TodoItem } from './TodoItem';\nimport { CreateTodoButton } from './CreateTodoButton';\nimport React, { useState } from \"react\"; //Los estados deben estar en el componente papa y ser pasados al componente hijo\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst array = [{\n  tarea: 'Estudiar 30 minutos al dia',\n  estado: 'Pendiente'\n}, {\n  tarea: 'Dormir 8 horas al dia',\n  estado: 'Pendiente'\n}, {\n  tarea: 'Tomar mate una vez por dia',\n  estado: 'Completado'\n}, {\n  tarea: 'Ir al Sauna',\n  estado: 'Pendiente'\n}, {\n  tarea: 'Pestañear',\n  estado: 'Completado'\n}];\nlocalStorage.setItem(array, 'Version_1');\n//Componente React\nconst BackgroundImage = () => {\n  _s();\n  let [search, setSearch] = useState(\"\");\n  let [todos, setTodos] = useState(localStorage.getItem('Version_1'));\n\n  //Funcion para obtener la estadistica de cantidad de completados y totales\n  const reducedResult = todos.reduce((accumulator, currentTask) => {\n    accumulator.totalTasks++;\n    if (currentTask.estado === 'Completado') {\n      accumulator.completedTasks++;\n    }\n    return accumulator;\n  }, {\n    totalTasks: 0,\n    completedTasks: 0\n  });\n\n  // Filtra el array 'todos' basado en el valor de 'search'\n  const filteredTodos = todos.filter(todo => {\n    // Verifica si la tarea incluye la palabra introducida en 'search'\n    return todo.tarea.toLowerCase().includes(search.toLowerCase());\n  });\n\n  //Creamos la funcion para actualizar el estado del todo a completado para pasarselo al todoItem tal que al presionar el\n  //icono de tickeado aparezca completado\n  const CompletarTodo = tarea => {\n    const newTodos = [...todos]; //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(todo => todo.tarea == tarea);\n    newTodos[todoIndex].estado = \"Completado\"; //cambiamos el estado del todo apretado\n    setTodos(newTodos);\n  };\n  //Creamos la funcion para actualizar el estado del vector todos a eliminar el todo al presionar el icono cancel en el todoItem\n  const eliminarTodo = tarea => {\n    let newTodos = [...todos]; //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(todo => todo.tarea == tarea);\n    if (todoIndex !== -1) {\n      newTodos.splice(todoIndex, 1); // Eliminamos el elemento en el índice todoIndex\n      setTodos(newTodos); // Actualizamos el estado con el nuevo array sin el elemento\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background-image\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-list-container\",\n      children: [/*#__PURE__*/_jsxDEV(TodoCounter, {\n        tasks: reducedResult.totalTasks,\n        completed: reducedResult.completedTasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoSearch, {\n        search: search,\n        setSearch: setSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), filteredTodos.map(todo =>\n      /*#__PURE__*/\n      //usamos el estado inicial de los todos para renderizarlos\n      _jsxDEV(TodoItem, {\n        texto: todo.tarea,\n        state: todo.estado,\n        onComplete: () => CompletarTodo(todo.tarea),\n        onDelete: () => eliminarTodo(todo.tarea)\n      }, todo.tarea, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(TodoList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CreateTodoButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(BackgroundImage, \"yyee78kFmLG+/Vt8280YU7O7cUQ=\");\n_c = BackgroundImage;\nexport default BackgroundImage;\nvar _c;\n$RefreshReg$(_c, \"BackgroundImage\");","map":{"version":3,"names":["TodoCounter","TodoSearch","TodoList","TodoItem","CreateTodoButton","React","useState","jsxDEV","_jsxDEV","array","tarea","estado","localStorage","setItem","BackgroundImage","_s","search","setSearch","todos","setTodos","getItem","reducedResult","reduce","accumulator","currentTask","totalTasks","completedTasks","filteredTodos","filter","todo","toLowerCase","includes","CompletarTodo","newTodos","todoIndex","findIndex","eliminarTodo","splice","className","children","tasks","completed","fileName","_jsxFileName","lineNumber","columnNumber","map","texto","state","onComplete","onDelete","_c","$RefreshReg$"],"sources":["/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/BackgroundImage.js"],"sourcesContent":["// BackgroundImage.js\nimport './styles.css';\nimport { TodoCounter } from './TodoCounter';\nimport { TodoSearch } from './TodoSearch';  \nimport { TodoList } from './TodoList';\nimport { TodoItem } from './TodoItem';\nimport { CreateTodoButton } from './CreateTodoButton';\nimport React, { useState } from \"react\"; //Los estados deben estar en el componente papa y ser pasados al componente hijo\n\n\nconst array = [{tarea:'Estudiar 30 minutos al dia', estado:'Pendiente'},\n              {tarea:'Dormir 8 horas al dia', estado:'Pendiente'},\n              {tarea:'Tomar mate una vez por dia', estado:'Completado'},\n              {tarea:'Ir al Sauna', estado:'Pendiente'},\n              {tarea:'Pestañear', estado:'Completado'}\n];\nlocalStorage.setItem(array, 'Version_1');\n//Componente React\nconst BackgroundImage = () => {\n  let [search, setSearch] = useState(\"\");\n  let [todos, setTodos]= useState(localStorage.getItem('Version_1'))\n\n  //Funcion para obtener la estadistica de cantidad de completados y totales\n  const reducedResult = todos.reduce((accumulator, currentTask) => {\n  accumulator.totalTasks++;\n  if (currentTask.estado === 'Completado') {\n    accumulator.completedTasks++;\n  }\n  return accumulator;\n  }, { totalTasks: 0, completedTasks: 0 });\n\n  // Filtra el array 'todos' basado en el valor de 'search'\n  const filteredTodos = todos.filter(todo => {\n    // Verifica si la tarea incluye la palabra introducida en 'search'\n    return todo.tarea.toLowerCase().includes(search.toLowerCase());\n  });\n\n  //Creamos la funcion para actualizar el estado del todo a completado para pasarselo al todoItem tal que al presionar el\n  //icono de tickeado aparezca completado\n  const CompletarTodo = (tarea) => {\n    const newTodos = [...todos];  //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(\n      (todo) => todo.tarea == tarea);\n    newTodos[todoIndex].estado = \"Completado\";  //cambiamos el estado del todo apretado\n    setTodos(newTodos); \n  }\n  //Creamos la funcion para actualizar el estado del vector todos a eliminar el todo al presionar el icono cancel en el todoItem\n  const eliminarTodo =(tarea) => {\n    let newTodos = [...todos];  //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(\n      (todo) => todo.tarea == tarea);\n    if (todoIndex !== -1) {\n      newTodos.splice(todoIndex, 1); // Eliminamos el elemento en el índice todoIndex\n      setTodos(newTodos); // Actualizamos el estado con el nuevo array sin el elemento\n    }\n  }\n\n  return (\n    <div className=\"background-image\">\n      <div className=\"todo-list-container\"> \n        <TodoCounter tasks={reducedResult.totalTasks} completed={reducedResult.completedTasks}/>\n        <TodoSearch \n          search={search} setSearch={setSearch}\n        />\n        <TodoList />\n          {filteredTodos.map(todo => (    //usamos el estado inicial de los todos para renderizarlos\n            <TodoItem key={todo.tarea} texto={todo.tarea} state={todo.estado} \n              onComplete={()=> CompletarTodo(todo.tarea)}\n              onDelete={()=> eliminarTodo(todo.tarea)}\n            />\n          ))}\n        <TodoList />\n        <CreateTodoButton />\n      </div>\n    </div>\n  );\n};\n\nexport default BackgroundImage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}