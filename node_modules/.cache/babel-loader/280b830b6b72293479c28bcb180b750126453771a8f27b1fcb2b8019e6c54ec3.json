{"ast":null,"code":"var _jsxFileName = \"/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/App/index.js\",\n  _s = $RefreshSig$();\nimport react from 'react';\n//import './App.css';\nimport { AppUI } from './AppUI';\nimport { useLocalStorage } from '../Hooks/useLocalStorage';\nimport React, { useState, useEffect } from \"react\"; //Los estados deben estar en el componente papa y ser pasados al componente hijo\n\n// const array = [{tarea:'Estudiar 30 minutos al dia', estado:'Pendiente'},\n//               {tarea:'Dormir 8 horas al dia', estado:'Pendiente'},\n//               {tarea:'Tomar mate una vez por dia', estado:'Completado'},\n//               {tarea:'Ir al Sauna', estado:'Pendiente'},\n//               {tarea:'Pestañear', estado:'Completado'},\n//               {tarea:'Terminar el Curso de React', estado:'Pendiente'},\n//               {tarea:'Comer la comida', estado:'Completado'},\n//               {tarea:'Reparar mi vida!', estado:'Pendiente'},\n//               {tarea:'Reposar las costillas', estado:'Pendiente'},\n// ]; ->  dsps en consola: localStorage.setItem('Version_1',JSON.stringify(array));\n\n//Componente React\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let [search, setSearch] = useState(\"\");\n  let [todos, saveStateTodos, error] = useLocalStorage([]);\n  //console.log(todos[0]);  -> tarea + estado_tarea\n  //console.log(typeof saveStateTodos); //->function -> es el customhook\n  //Funcion para obtener la estadistica de cantidad de completados y totales\n  const reducedResult = todos.reduce((accumulator, currentTask) => {\n    accumulator.totalTasks++;\n    if (currentTask.estado === 'Completado') {\n      accumulator.completedTasks++;\n    }\n    return accumulator;\n  }, {\n    totalTasks: 0,\n    completedTasks: 0\n  });\n\n  // Filtra el array 'todos' basado en el valor de 'search'\n  const filteredTodos = todos.filter(todo => {\n    // Verifica si la tarea incluye la palabra introducida en 'search'\n    return todo.tarea.toLowerCase().includes(search.toLowerCase());\n  });\n\n  //Creamos la funcion para actualizar el estado del todo a completado para pasarselo al todoItem tal que al presionar el\n  //icono de tickeado aparezca completado\n  const CompletarTodo = tarea => {\n    const newTodos = [...todos]; //creamos una copia del array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(todo => todo.tarea === tarea);\n    newTodos[todoIndex].estado = \"Completado\"; //cambiamos el estado del todo apretado\n    //setTodos(newTodos); -> antes de usar localstorage\n    saveStateTodos(newTodos); //persistimos el cambio con localstorage\n  };\n  //Creamos la funcion para actualizar el estado del vector todos a eliminar el todo al presionar el icono cancel en el todoItem\n  const eliminarTodo = tarea => {\n    let newTodos = [...todos]; //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(todo => todo.tarea === tarea);\n    if (todoIndex !== -1) {\n      newTodos.splice(todoIndex, 1); // Eliminamos el elemento en el índice todoIndex\n      //setTodos(newTodos); // Actualizamos el estado con el nuevo array sin el elemento; -> antes de usar localstorage\n      saveStateTodos(newTodos);\n    }\n  };\n  //Vamos a crear un customHook para obtener una frase motivacional y renderizarla:\n  const [motivationalQuote, setMotivationalQuote] = useState(\"\");\n  useEffect(() => {\n    // Función asincrónica para obtener la frase motivacional\n    async function fetchMotivationalQuote() {\n      try {\n        var _data$;\n        const response = await fetch(\"https://zenquotes.io/api/random\");\n        const data = await response.json();\n        //console.log(data[0]?.q);\n        const quote = (_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.q; // Obtenemos la cita desde la respuesta\n        setMotivationalQuote(quote);\n      } catch (error) {\n        console.error(\"Error al obtener la frase motivacional:\", error);\n      }\n    }\n    // Llamamos a la función para obtener la frase motivacional cuando el componente se monta\n    fetchMotivationalQuote();\n  }, []);\n\n  //Vamos a usar otro archivo para la interfaz\n  return /*#__PURE__*/_jsxDEV(AppUI, {\n    reducedResult: reducedResult,\n    search: search,\n    setSearch: setSearch,\n    filteredTodos: filteredTodos,\n    CompletarTodo: CompletarTodo,\n    eliminarTodo: eliminarTodo,\n    motivationalQuote: motivationalQuote,\n    error: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Ew4JUEYk6S4uoJoxyjJZro8Uc7c=\", false, function () {\n  return [useLocalStorage];\n});\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["react","AppUI","useLocalStorage","React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","search","setSearch","todos","saveStateTodos","error","reducedResult","reduce","accumulator","currentTask","totalTasks","estado","completedTasks","filteredTodos","filter","todo","tarea","toLowerCase","includes","CompletarTodo","newTodos","todoIndex","findIndex","eliminarTodo","splice","motivationalQuote","setMotivationalQuote","fetchMotivationalQuote","_data$","response","fetch","data","json","quote","q","console","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/App/index.js"],"sourcesContent":["import react from 'react';\n//import './App.css';\nimport { AppUI } from './AppUI';\nimport { useLocalStorage } from '../Hooks/useLocalStorage';\nimport React, { useState, useEffect } from \"react\"; //Los estados deben estar en el componente papa y ser pasados al componente hijo\n\n// const array = [{tarea:'Estudiar 30 minutos al dia', estado:'Pendiente'},\n//               {tarea:'Dormir 8 horas al dia', estado:'Pendiente'},\n//               {tarea:'Tomar mate una vez por dia', estado:'Completado'},\n//               {tarea:'Ir al Sauna', estado:'Pendiente'},\n//               {tarea:'Pestañear', estado:'Completado'},\n//               {tarea:'Terminar el Curso de React', estado:'Pendiente'},\n//               {tarea:'Comer la comida', estado:'Completado'},\n//               {tarea:'Reparar mi vida!', estado:'Pendiente'},\n//               {tarea:'Reposar las costillas', estado:'Pendiente'},\n// ]; ->  dsps en consola: localStorage.setItem('Version_1',JSON.stringify(array));\n\n//Componente React\nfunction App () {\n  let [search, setSearch] = useState(\"\");\n  let [todos, saveStateTodos, error]= useLocalStorage([]);\n      //console.log(todos[0]);  -> tarea + estado_tarea\n      //console.log(typeof saveStateTodos); //->function -> es el customhook\n  //Funcion para obtener la estadistica de cantidad de completados y totales\n  const reducedResult = todos.reduce((accumulator, currentTask) => {\n  accumulator.totalTasks++;\n  if (currentTask.estado === 'Completado') {\n    accumulator.completedTasks++;\n  }\n  return accumulator;\n  }, { totalTasks: 0, completedTasks: 0 });\n\n  // Filtra el array 'todos' basado en el valor de 'search'\n  const filteredTodos = todos.filter(todo => {\n    // Verifica si la tarea incluye la palabra introducida en 'search'\n    return todo.tarea.toLowerCase().includes(search.toLowerCase());\n  });\n\n  //Creamos la funcion para actualizar el estado del todo a completado para pasarselo al todoItem tal que al presionar el\n  //icono de tickeado aparezca completado\n  const CompletarTodo = (tarea) => {\n    const newTodos = [...todos];  //creamos una copia del array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(\n      (todo) => todo.tarea === tarea);\n    newTodos[todoIndex].estado = \"Completado\";  //cambiamos el estado del todo apretado\n    //setTodos(newTodos); -> antes de usar localstorage\n    saveStateTodos(newTodos);   //persistimos el cambio con localstorage\n  }\n  //Creamos la funcion para actualizar el estado del vector todos a eliminar el todo al presionar el icono cancel en el todoItem\n  const eliminarTodo =(tarea) => {\n    let newTodos = [...todos];  //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(\n      (todo) => todo.tarea === tarea);\n    if (todoIndex !== -1) {\n      newTodos.splice(todoIndex, 1); // Eliminamos el elemento en el índice todoIndex\n      //setTodos(newTodos); // Actualizamos el estado con el nuevo array sin el elemento; -> antes de usar localstorage\n      saveStateTodos(newTodos);\n    }\n  }\n  //Vamos a crear un customHook para obtener una frase motivacional y renderizarla:\n  const [motivationalQuote, setMotivationalQuote] = useState(\"\");\n\n  useEffect(() => {\n    // Función asincrónica para obtener la frase motivacional\n    async function fetchMotivationalQuote() {\n      try {\n        const response = await fetch(\"https://zenquotes.io/api/random\");\n        const data = await response.json();\n        //console.log(data[0]?.q);\n        const quote = data[0]?.q; // Obtenemos la cita desde la respuesta\n        setMotivationalQuote(quote);\n      } catch (error) {\n        console.error(\"Error al obtener la frase motivacional:\", error);\n      }\n    }\n    // Llamamos a la función para obtener la frase motivacional cuando el componente se monta\n    fetchMotivationalQuote();\n  }, []);\n  \n\n//Vamos a usar otro archivo para la interfaz\n  return (\n    <AppUI \n      reducedResult = {reducedResult}\n      search = {search}\n      setSearch = {setSearch}\n      filteredTodos = {filteredTodos}\n      CompletarTodo = {CompletarTodo}\n      eliminarTodo = {eliminarTodo}\n      motivationalQuote = {motivationalQuote}\n      error ={error}\n    />\n\n  );\n\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}