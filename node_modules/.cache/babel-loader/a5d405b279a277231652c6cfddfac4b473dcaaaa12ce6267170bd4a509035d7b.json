{"ast":null,"code":"import _regeneratorRuntime from\"/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _toConsumableArray from\"/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import react from'react';//import './App.css';\nimport{AppUI}from'./AppUI';import{useLocalStorage}from'../Hooks/useLocalStorage';import React,{useState,useEffect}from\"react\";//Los estados deben estar en el componente papa y ser pasados al componente hijo\n// const array = [{tarea:'Estudiar 30 minutos al dia', estado:'Pendiente'},\n//               {tarea:'Dormir 8 horas al dia', estado:'Pendiente'},\n//               {tarea:'Tomar mate una vez por dia', estado:'Completado'},\n//               {tarea:'Ir al Sauna', estado:'Pendiente'},\n//               {tarea:'Pestañear', estado:'Completado'},\n//               {tarea:'Terminar el Curso de React', estado:'Pendiente'},\n//               {tarea:'Comer la comida', estado:'Completado'},\n//               {tarea:'Reparar mi vida!', estado:'Pendiente'},\n//               {tarea:'Reposar las costillas', estado:'Pendiente'},\n// ];\n//Componente React\nimport{jsx as _jsx}from\"react/jsx-runtime\";function App(){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),search=_useState2[0],setSearch=_useState2[1];var _useLocalStorage=useLocalStorage([]),_useLocalStorage2=_slicedToArray(_useLocalStorage,2),todos=_useLocalStorage2[0],saveStateTodos=_useLocalStorage2[1];//console.log(todos[0]);  -> tarea + estado_tarea\n//console.log(typeof saveStateTodos); //->function -> es el customhook\n//Funcion para obtener la estadistica de cantidad de completados y totales\nvar reducedResult=todos.reduce(function(accumulator,currentTask){accumulator.totalTasks++;if(currentTask.estado==='Completado'){accumulator.completedTasks++;}return accumulator;},{totalTasks:0,completedTasks:0});// Filtra el array 'todos' basado en el valor de 'search'\nvar filteredTodos=todos.filter(function(todo){// Verifica si la tarea incluye la palabra introducida en 'search'\nreturn todo.tarea.toLowerCase().includes(search.toLowerCase());});//Creamos la funcion para actualizar el estado del todo a completado para pasarselo al todoItem tal que al presionar el\n//icono de tickeado aparezca completado\nvar CompletarTodo=function CompletarTodo(tarea){var newTodos=_toConsumableArray(todos);//creamos una copia del array con la lista de todos tal que podamos actualizarla\nvar todoIndex=newTodos.findIndex(function(todo){return todo.tarea===tarea;});newTodos[todoIndex].estado=\"Completado\";//cambiamos el estado del todo apretado\n//setTodos(newTodos); -> antes de usar localstorage\nsaveStateTodos(newTodos);//persistimos el cambio con localstorage\n};//Creamos la funcion para actualizar el estado del vector todos a eliminar el todo al presionar el icono cancel en el todoItem\nvar eliminarTodo=function eliminarTodo(tarea){var newTodos=_toConsumableArray(todos);//creamos un nuevo array con la lista de todos tal que podamos actualizarla\nvar todoIndex=newTodos.findIndex(function(todo){return todo.tarea===tarea;});if(todoIndex!==-1){newTodos.splice(todoIndex,1);// Eliminamos el elemento en el índice todoIndex\n//setTodos(newTodos); // Actualizamos el estado con el nuevo array sin el elemento; -> antes de usar localstorage\nsaveStateTodos(newTodos);}};//Vamos a crear un customHook para obtener una frase motivacional y renderizarla:\nvar _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),motivationalQuote=_useState4[0],setMotivationalQuote=_useState4[1];useEffect(function(){// Función asincrónica para obtener la frase motivacional\nfunction fetchMotivationalQuote(){return _fetchMotivationalQuote.apply(this,arguments);}// Llamamos a la función para obtener la frase motivacional cuando el componente se monta\nfunction _fetchMotivationalQuote(){_fetchMotivationalQuote=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var _data$,_data$2,response,data,quote;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch(\"https://zenquotes.io/api/random\");case 3:response=_context.sent;_context.next=6;return response.json();case 6:data=_context.sent;console.log((_data$=data[0])===null||_data$===void 0?void 0:_data$.q);quote=(_data$2=data[0])===null||_data$2===void 0?void 0:_data$2.q;// Obtenemos la cita desde la respuesta\nsetMotivationalQuote(quote);_context.next=15;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);console.error(\"Error al obtener la frase motivacional:\",_context.t0);case 15:case\"end\":return _context.stop();}},_callee,null,[[0,12]]);}));return _fetchMotivationalQuote.apply(this,arguments);}fetchMotivationalQuote();},[]);//Vamos a usar otro archivo para la interfaz\nreturn/*#__PURE__*/_jsx(AppUI,{reducedResult:reducedResult,search:search,setSearch:setSearch,filteredTodos:filteredTodos,CompletarTodo:CompletarTodo,eliminarTodo:eliminarTodo,motivationalQuote:motivationalQuote});};export default App;","map":{"version":3,"names":["react","AppUI","useLocalStorage","React","useState","useEffect","jsx","_jsx","App","_useState","_useState2","_slicedToArray","search","setSearch","_useLocalStorage","_useLocalStorage2","todos","saveStateTodos","reducedResult","reduce","accumulator","currentTask","totalTasks","estado","completedTasks","filteredTodos","filter","todo","tarea","toLowerCase","includes","CompletarTodo","newTodos","_toConsumableArray","todoIndex","findIndex","eliminarTodo","splice","_useState3","_useState4","motivationalQuote","setMotivationalQuote","fetchMotivationalQuote","_fetchMotivationalQuote","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_data$","_data$2","response","data","quote","wrap","_callee$","_context","prev","next","fetch","sent","json","console","log","q","t0","error","stop"],"sources":["/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/App/index.js"],"sourcesContent":["import react from 'react';\n//import './App.css';\nimport { AppUI } from './AppUI';\nimport { useLocalStorage } from '../Hooks/useLocalStorage';\nimport React, { useState, useEffect } from \"react\"; //Los estados deben estar en el componente papa y ser pasados al componente hijo\n\n// const array = [{tarea:'Estudiar 30 minutos al dia', estado:'Pendiente'},\n//               {tarea:'Dormir 8 horas al dia', estado:'Pendiente'},\n//               {tarea:'Tomar mate una vez por dia', estado:'Completado'},\n//               {tarea:'Ir al Sauna', estado:'Pendiente'},\n//               {tarea:'Pestañear', estado:'Completado'},\n//               {tarea:'Terminar el Curso de React', estado:'Pendiente'},\n//               {tarea:'Comer la comida', estado:'Completado'},\n//               {tarea:'Reparar mi vida!', estado:'Pendiente'},\n//               {tarea:'Reposar las costillas', estado:'Pendiente'},\n// ];\n\n\n//Componente React\nfunction App () {\n  let [search, setSearch] = useState(\"\");\n  let [todos, saveStateTodos]= useLocalStorage([]);\n      //console.log(todos[0]);  -> tarea + estado_tarea\n      //console.log(typeof saveStateTodos); //->function -> es el customhook\n  //Funcion para obtener la estadistica de cantidad de completados y totales\n  const reducedResult = todos.reduce((accumulator, currentTask) => {\n  accumulator.totalTasks++;\n  if (currentTask.estado === 'Completado') {\n    accumulator.completedTasks++;\n  }\n  return accumulator;\n  }, { totalTasks: 0, completedTasks: 0 });\n\n  // Filtra el array 'todos' basado en el valor de 'search'\n  const filteredTodos = todos.filter(todo => {\n    // Verifica si la tarea incluye la palabra introducida en 'search'\n    return todo.tarea.toLowerCase().includes(search.toLowerCase());\n  });\n\n  //Creamos la funcion para actualizar el estado del todo a completado para pasarselo al todoItem tal que al presionar el\n  //icono de tickeado aparezca completado\n  const CompletarTodo = (tarea) => {\n    const newTodos = [...todos];  //creamos una copia del array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(\n      (todo) => todo.tarea === tarea);\n    newTodos[todoIndex].estado = \"Completado\";  //cambiamos el estado del todo apretado\n    //setTodos(newTodos); -> antes de usar localstorage\n    saveStateTodos(newTodos);   //persistimos el cambio con localstorage\n  }\n  //Creamos la funcion para actualizar el estado del vector todos a eliminar el todo al presionar el icono cancel en el todoItem\n  const eliminarTodo =(tarea) => {\n    let newTodos = [...todos];  //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(\n      (todo) => todo.tarea === tarea);\n    if (todoIndex !== -1) {\n      newTodos.splice(todoIndex, 1); // Eliminamos el elemento en el índice todoIndex\n      //setTodos(newTodos); // Actualizamos el estado con el nuevo array sin el elemento; -> antes de usar localstorage\n      saveStateTodos(newTodos);\n    }\n  }\n  //Vamos a crear un customHook para obtener una frase motivacional y renderizarla:\n  const [motivationalQuote, setMotivationalQuote] = useState(\"\");\n\n  useEffect(() => {\n    // Función asincrónica para obtener la frase motivacional\n    async function fetchMotivationalQuote() {\n      try {\n        const response = await fetch(\"https://zenquotes.io/api/random\");\n        const data = await response.json();\n        console.log(data[0]?.q);\n        const quote = data[0]?.q; // Obtenemos la cita desde la respuesta\n        setMotivationalQuote(quote);\n      } catch (error) {\n        console.error(\"Error al obtener la frase motivacional:\", error);\n      }\n    }\n  \n    // Llamamos a la función para obtener la frase motivacional cuando el componente se monta\n    fetchMotivationalQuote();\n  }, []);\n  \n\n//Vamos a usar otro archivo para la interfaz\n  return (\n    <AppUI \n      reducedResult = {reducedResult}\n      search = {search}\n      setSearch = {setSearch}\n      filteredTodos = {filteredTodos}\n      CompletarTodo = {CompletarTodo}\n      eliminarTodo = {eliminarTodo}\n      motivationalQuote = {motivationalQuote}\n    />\n\n  );\n\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}