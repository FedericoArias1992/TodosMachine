{"ast":null,"code":"var _jsxFileName = \"/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/BackgroundImage.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// BackgroundImage.js\nimport './styles.css';\nimport { TodoCounter } from './TodoCounter';\nimport { TodoSearch } from './TodoSearch';\nimport { TodoList } from './TodoList';\nimport { TodoItem } from './TodoItem';\nimport { CreateTodoButton } from './CreateTodoButton';\nimport React, { useState } from \"react\"; //Los estados deben estar en el componente papa y ser pasados al componente hijo\n\n// const array = [{tarea:'Estudiar 30 minutos al dia', estado:'Pendiente'},\n//               {tarea:'Dormir 8 horas al dia', estado:'Pendiente'},\n//               {tarea:'Tomar mate una vez por dia', estado:'Completado'},\n//               {tarea:'Ir al Sauna', estado:'Pendiente'},\n//               {tarea:'Pestañear', estado:'Completado'}\n// ];\n\n//Vamos a usar localstorage para tener persistencia de datos, sin usar base de datos relacional ni no relacionales\n//let stringifiedArray = localStorage.setItem('Version_1', JSON.stringify(array)); -> para inicializar la version_1 del Localstorage\n//tambien vamos a crear un customhook para manejar todo lo relacionado a localstorage:\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction useLocalStorage(initialValue) {\n  _s();\n  let localstoragedArray = localStorage.getItem('Version_1');\n  let parsedArray;\n  if (!localstoragedArray) {\n    localStorage.setItem('Version_1', JSON.stringify(initialValue)); //si Version_1 (primera vez que se abre la app) = Vacio -> array vacio, pq si no hay que mostrar, la app crashea!\n    parsedArray = [];\n  } else {\n    parsedArray = JSON.parse(localstoragedArray);\n  }\n  const [item, setItem] = useState(parsedArray); //asignamos el valor vacio o inicial al estado del customhook\n  //necesitamos la funcion que actualice el estado de los elementos y a la vez el localstorage tal que exista persistencia de datos\n  //al refrescar la pagina:\n  const saveStateTodos = newTodos => {\n    localStorage.setItem('Version_1', JSON.stringify(newTodos));\n    setItem(newTodos);\n  };\n  return [saveStateTodos, item]; //saveStateTodos es el array persistente de todos, item es la lista de todos parseada\n}\n\n//Componente React\n_s(useLocalStorage, \"x+RosdqzKQD/rSYdzwXA/1gSOGM=\");\nconst Component = () => {\n  _s2();\n  let [search, setSearch] = useState(\"\");\n  let [todos, setTodos] = useLocalStorage([]);\n};\n\n//Funcion para obtener la estadistica de cantidad de completados y totales\n_s2(Component, \"W61YAgIa/9L2DwmMUT36FBa2nZw=\", false, function () {\n  return [useLocalStorage];\n});\n_c = Component;\nconst reducedResult = todos.reduce((accumulator, currentTask) => {\n  accumulator.totalTasks++;\n  if (currentTask.estado === 'Completado') {\n    accumulator.completedTasks++;\n  }\n  return accumulator;\n}, {\n  totalTasks: 0,\n  completedTasks: 0\n});\n\n// Filtra el array 'todos' basado en el valor de 'search'\nconst filteredTodos = todos.filter(todo => {\n  // Verifica si la tarea incluye la palabra introducida en 'search'\n  return todo.tarea.toLowerCase().includes(search.toLowerCase());\n});\n\n//Creamos la funcion para actualizar el estado del todo a completado para pasarselo al todoItem tal que al presionar el\n//icono de tickeado aparezca completado\nconst CompletarTodo = tarea => {\n  const newTodos = [...todos]; //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n  const todoIndex = newTodos.findIndex(todo => todo.tarea === tarea);\n  newTodos[todoIndex].estado = \"Completado\"; //cambiamos el estado del todo apretado\n  //setTodos(newTodos); -> antes de usar localstorage\n  saveStateTodos(newTodos);\n};\n//Creamos la funcion para actualizar el estado del vector todos a eliminar el todo al presionar el icono cancel en el todoItem\n_c2 = CompletarTodo;\nconst eliminarTodo = tarea => {\n  let newTodos = [...todos]; //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n  const todoIndex = newTodos.findIndex(todo => todo.tarea === tarea);\n  if (todoIndex !== -1) {\n    newTodos.splice(todoIndex, 1); // Eliminamos el elemento en el índice todoIndex\n    //setTodos(newTodos); // Actualizamos el estado con el nuevo array sin el elemento; -> antes de usar localstorage\n    saveStateTodos(newTodos);\n  }\n};\nfunction BackgroundImage() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background-image\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-list-container\",\n      children: [/*#__PURE__*/_jsxDEV(TodoCounter, {\n        tasks: reducedResult.totalTasks,\n        completed: reducedResult.completedTasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoSearch, {\n        search: search,\n        setSearch: setSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), filteredTodos.map(todo =>\n      /*#__PURE__*/\n      //usamos el estado inicial de los todos para renderizarlos\n      _jsxDEV(TodoItem, {\n        texto: todo.tarea,\n        state: todo.estado,\n        onComplete: () => CompletarTodo(todo.tarea),\n        onDelete: () => eliminarTodo(todo.tarea)\n      }, todo.tarea, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(TodoList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CreateTodoButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_c3 = BackgroundImage;\n;\nexport default BackgroundImage;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Component\");\n$RefreshReg$(_c2, \"CompletarTodo\");\n$RefreshReg$(_c3, \"BackgroundImage\");","map":{"version":3,"names":["TodoCounter","TodoSearch","TodoList","TodoItem","CreateTodoButton","React","useState","jsxDEV","_jsxDEV","useLocalStorage","initialValue","_s","localstoragedArray","localStorage","getItem","parsedArray","setItem","JSON","stringify","parse","item","saveStateTodos","newTodos","Component","_s2","search","setSearch","todos","setTodos","_c","reducedResult","reduce","accumulator","currentTask","totalTasks","estado","completedTasks","filteredTodos","filter","todo","tarea","toLowerCase","includes","CompletarTodo","todoIndex","findIndex","_c2","eliminarTodo","splice","BackgroundImage","className","children","tasks","completed","fileName","_jsxFileName","lineNumber","columnNumber","map","texto","state","onComplete","onDelete","_c3","$RefreshReg$"],"sources":["/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/BackgroundImage.js"],"sourcesContent":["// BackgroundImage.js\nimport './styles.css';\nimport { TodoCounter } from './TodoCounter';\nimport { TodoSearch } from './TodoSearch';  \nimport { TodoList } from './TodoList';\nimport { TodoItem } from './TodoItem';\nimport { CreateTodoButton } from './CreateTodoButton';\nimport React, { useState } from \"react\"; //Los estados deben estar en el componente papa y ser pasados al componente hijo\n\n\n// const array = [{tarea:'Estudiar 30 minutos al dia', estado:'Pendiente'},\n//               {tarea:'Dormir 8 horas al dia', estado:'Pendiente'},\n//               {tarea:'Tomar mate una vez por dia', estado:'Completado'},\n//               {tarea:'Ir al Sauna', estado:'Pendiente'},\n//               {tarea:'Pestañear', estado:'Completado'}\n// ];\n\n//Vamos a usar localstorage para tener persistencia de datos, sin usar base de datos relacional ni no relacionales\n//let stringifiedArray = localStorage.setItem('Version_1', JSON.stringify(array)); -> para inicializar la version_1 del Localstorage\n//tambien vamos a crear un customhook para manejar todo lo relacionado a localstorage:\nfunction useLocalStorage(initialValue){\n  let localstoragedArray = localStorage.getItem('Version_1');\n  let parsedArray;\n  \n  if (!localstoragedArray) {\n    localStorage.setItem('Version_1',JSON.stringify(initialValue));  //si Version_1 (primera vez que se abre la app) = Vacio -> array vacio, pq si no hay que mostrar, la app crashea!\n    parsedArray = [];\n  } else {\n    parsedArray = JSON.parse(localstoragedArray);\n  }\n  const [item, setItem] = useState(parsedArray); //asignamos el valor vacio o inicial al estado del customhook\n  //necesitamos la funcion que actualice el estado de los elementos y a la vez el localstorage tal que exista persistencia de datos\n   //al refrescar la pagina:\n  const saveStateTodos = (newTodos) => {\n    localStorage.setItem('Version_1', JSON.stringify(newTodos));\n    setItem(newTodos);\n  }\n  return [saveStateTodos, item];  //saveStateTodos es el array persistente de todos, item es la lista de todos parseada\n}\n\n//Componente React\nconst Component = () => {\n  let [search, setSearch] = useState(\"\");\n  let [todos, setTodos]= useLocalStorage([]);}\n\n  //Funcion para obtener la estadistica de cantidad de completados y totales\n  const reducedResult = todos.reduce((accumulator, currentTask) => {\n  accumulator.totalTasks++;\n  if (currentTask.estado === 'Completado') {\n    accumulator.completedTasks++;\n  }\n  return accumulator;\n  }, { totalTasks: 0, completedTasks: 0 });\n\n  // Filtra el array 'todos' basado en el valor de 'search'\n  const filteredTodos = todos.filter(todo => {\n    // Verifica si la tarea incluye la palabra introducida en 'search'\n    return todo.tarea.toLowerCase().includes(search.toLowerCase());\n  });\n\n  //Creamos la funcion para actualizar el estado del todo a completado para pasarselo al todoItem tal que al presionar el\n  //icono de tickeado aparezca completado\n  const CompletarTodo = (tarea) => {\n    const newTodos = [...todos];  //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(\n      (todo) => todo.tarea === tarea);\n    newTodos[todoIndex].estado = \"Completado\";  //cambiamos el estado del todo apretado\n    //setTodos(newTodos); -> antes de usar localstorage\n    saveStateTodos(newTodos);\n  }\n  //Creamos la funcion para actualizar el estado del vector todos a eliminar el todo al presionar el icono cancel en el todoItem\n  const eliminarTodo =(tarea) => {\n    let newTodos = [...todos];  //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(\n      (todo) => todo.tarea === tarea);\n    if (todoIndex !== -1) {\n      newTodos.splice(todoIndex, 1); // Eliminamos el elemento en el índice todoIndex\n      //setTodos(newTodos); // Actualizamos el estado con el nuevo array sin el elemento; -> antes de usar localstorage\n      saveStateTodos(newTodos);\n    }\n  }\nfunction BackgroundImage (){\n  return (\n    <div className=\"background-image\">\n      <div className=\"todo-list-container\"> \n        <TodoCounter tasks={reducedResult.totalTasks} completed={reducedResult.completedTasks}/>\n        <TodoSearch \n          search={search} setSearch={setSearch}\n        />\n        <TodoList />\n          {filteredTodos.map(todo => (    //usamos el estado inicial de los todos para renderizarlos\n            <TodoItem key={todo.tarea} texto={todo.tarea} state={todo.estado} \n              onComplete={()=> CompletarTodo(todo.tarea)}\n              onDelete={()=> eliminarTodo(todo.tarea)}\n            />\n          ))}\n        <TodoList />\n        <CreateTodoButton />\n      </div>\n    </div>\n  );\n};\nexport default BackgroundImage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}