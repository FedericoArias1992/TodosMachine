{"ast":null,"code":"var _jsxFileName = \"/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/BackgroundImage.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// BackgroundImage.js\nimport './styles.css';\nimport { TodoCounter } from './TodoCounter';\nimport { TodoSearch } from './TodoSearch';\nimport { TodoList } from './TodoList';\nimport { TodoItem } from './TodoItem';\nimport { CreateTodoButton } from './CreateTodoButton';\nimport React, { useState } from \"react\"; //Los estados deben estar en el componente papa y ser pasados al componente hijo\n\n// const array = [{tarea:'Estudiar 30 minutos al dia', estado:'Pendiente'},\n//               {tarea:'Dormir 8 horas al dia', estado:'Pendiente'},\n//               {tarea:'Tomar mate una vez por dia', estado:'Completado'},\n//               {tarea:'Ir al Sauna', estado:'Pendiente'},\n//               {tarea:'Pestañear', estado:'Completado'},\n//               {tarea:'Terminar el Curso de React', estado:'Pendiente'},\n//               {tarea:'Comer la comida', estado:'Completado'},\n//               {tarea:'Reparar mi vida!', estado:'Pendiente'},\n//               {tarea:'Reposar las costillas', estado:'Pendiente'},\n// ];\n\n//Vamos a usar localstorage para tener persistencia de datos, sin usar base de datos relacional ni no relacionales\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stringifiedArray = localStorage.setItem('Version_1', JSON.stringify(array)); //-> para inicializar la version_1 del Localstorage\n//tambien vamos a crear un customhook para manejar todo lo relacionado a localstorage:\nfunction useLocalStorage(initialValue) {\n  _s();\n  let localstoragedArray = localStorage.getItem('Version_1');\n  let parsedArray;\n  if (!localstoragedArray) {\n    localStorage.setItem('Version_1', JSON.stringify(initialValue)); //si Version_1 (primera vez que se abre la app) = Vacio -> array vacio, pq si no hay que mostrar, la app crashea!\n    parsedArray = [];\n  } else {\n    parsedArray = JSON.parse(localstoragedArray);\n  }\n  const [item, setItem] = useState(parsedArray); //asignamos el valor vacio o inicial al estado del customhook\n  //necesitamos la funcion que actualice el estado de los elementos y a la vez el localstorage tal que exista persistencia de datos\n  //al refrescar la pagina:\n  const saveStateTodos = newTodos => {\n    localStorage.setItem('Version_1', JSON.stringify(newTodos));\n    setItem(newTodos);\n  };\n  return [item, saveStateTodos]; //saveStateTodos es el array persistente de todos, item es la lista de todos parseada\n}\n\n//Componente React\n_s(useLocalStorage, \"x+RosdqzKQD/rSYdzwXA/1gSOGM=\");\nfunction BackgroundImage() {\n  _s2();\n  let [search, setSearch] = useState(\"\");\n  let [todos, saveStateTodos] = useLocalStorage([]);\n  console.log(saveStateTodos);\n  //Funcion para obtener la estadistica de cantidad de completados y totales\n  const reducedResult = todos.reduce((accumulator, currentTask) => {\n    accumulator.totalTasks++;\n    if (currentTask.estado === 'Completado') {\n      accumulator.completedTasks++;\n    }\n    return accumulator;\n  }, {\n    totalTasks: 0,\n    completedTasks: 0\n  });\n\n  // Filtra el array 'todos' basado en el valor de 'search'\n  const filteredTodos = todos.filter(todo => {\n    // Verifica si la tarea incluye la palabra introducida en 'search'\n    return todo.tarea.toLowerCase().includes(search.toLowerCase());\n  });\n\n  //Creamos la funcion para actualizar el estado del todo a completado para pasarselo al todoItem tal que al presionar el\n  //icono de tickeado aparezca completado\n  const CompletarTodo = tarea => {\n    const newTodos = [...todos]; //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(todo => todo.tarea === tarea);\n    newTodos[todoIndex].estado = \"Completado\"; //cambiamos el estado del todo apretado\n    //setTodos(newTodos); -> antes de usar localstorage\n    saveStateTodos(newTodos);\n  };\n  //Creamos la funcion para actualizar el estado del vector todos a eliminar el todo al presionar el icono cancel en el todoItem\n  const eliminarTodo = tarea => {\n    let newTodos = [...todos]; //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(todo => todo.tarea === tarea);\n    if (todoIndex !== -1) {\n      newTodos.splice(todoIndex, 1); // Eliminamos el elemento en el índice todoIndex\n      //setTodos(newTodos); // Actualizamos el estado con el nuevo array sin el elemento; -> antes de usar localstorage\n      saveStateTodos(newTodos);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background-image\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-list-container\",\n      children: [/*#__PURE__*/_jsxDEV(TodoCounter, {\n        tasks: reducedResult.totalTasks,\n        completed: reducedResult.completedTasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoSearch, {\n        search: search,\n        setSearch: setSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), filteredTodos.map(todo =>\n      /*#__PURE__*/\n      //usamos el estado inicial de los todos para renderizarlos\n      _jsxDEV(TodoItem, {\n        texto: todo.tarea,\n        state: todo.estado,\n        onComplete: () => CompletarTodo(todo.tarea),\n        onDelete: () => eliminarTodo(todo.tarea)\n      }, todo.tarea, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(TodoList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CreateTodoButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s2(BackgroundImage, \"RGutxFrje+MCvQlZW2onXAJF9Ls=\", false, function () {\n  return [useLocalStorage];\n});\n_c = BackgroundImage;\n;\nexport default BackgroundImage;\nvar _c;\n$RefreshReg$(_c, \"BackgroundImage\");","map":{"version":3,"names":["TodoCounter","TodoSearch","TodoList","TodoItem","CreateTodoButton","React","useState","jsxDEV","_jsxDEV","stringifiedArray","localStorage","setItem","JSON","stringify","array","useLocalStorage","initialValue","_s","localstoragedArray","getItem","parsedArray","parse","item","saveStateTodos","newTodos","BackgroundImage","_s2","search","setSearch","todos","console","log","reducedResult","reduce","accumulator","currentTask","totalTasks","estado","completedTasks","filteredTodos","filter","todo","tarea","toLowerCase","includes","CompletarTodo","todoIndex","findIndex","eliminarTodo","splice","className","children","tasks","completed","fileName","_jsxFileName","lineNumber","columnNumber","map","texto","state","onComplete","onDelete","_c","$RefreshReg$"],"sources":["/home/federico/Proyectos/CursosPlatzi/CursoReact/curso-react-intro/src/BackgroundImage.js"],"sourcesContent":["// BackgroundImage.js\nimport './styles.css';\nimport { TodoCounter } from './TodoCounter';\nimport { TodoSearch } from './TodoSearch';  \nimport { TodoList } from './TodoList';\nimport { TodoItem } from './TodoItem';\nimport { CreateTodoButton } from './CreateTodoButton';\nimport React, { useState } from \"react\"; //Los estados deben estar en el componente papa y ser pasados al componente hijo\n\n\n// const array = [{tarea:'Estudiar 30 minutos al dia', estado:'Pendiente'},\n//               {tarea:'Dormir 8 horas al dia', estado:'Pendiente'},\n//               {tarea:'Tomar mate una vez por dia', estado:'Completado'},\n//               {tarea:'Ir al Sauna', estado:'Pendiente'},\n//               {tarea:'Pestañear', estado:'Completado'},\n//               {tarea:'Terminar el Curso de React', estado:'Pendiente'},\n//               {tarea:'Comer la comida', estado:'Completado'},\n//               {tarea:'Reparar mi vida!', estado:'Pendiente'},\n//               {tarea:'Reposar las costillas', estado:'Pendiente'},\n// ];\n\n//Vamos a usar localstorage para tener persistencia de datos, sin usar base de datos relacional ni no relacionales\nlet stringifiedArray = localStorage.setItem('Version_1', JSON.stringify(array)); //-> para inicializar la version_1 del Localstorage\n//tambien vamos a crear un customhook para manejar todo lo relacionado a localstorage:\nfunction useLocalStorage(initialValue){\n  let localstoragedArray = localStorage.getItem('Version_1');\n  let parsedArray;\n  \n  if (!localstoragedArray) {\n    localStorage.setItem('Version_1',JSON.stringify(initialValue));  //si Version_1 (primera vez que se abre la app) = Vacio -> array vacio, pq si no hay que mostrar, la app crashea!\n    parsedArray = [];\n  } else {\n    parsedArray = JSON.parse(localstoragedArray);\n  }\n  const [item, setItem] = useState(parsedArray); //asignamos el valor vacio o inicial al estado del customhook\n  //necesitamos la funcion que actualice el estado de los elementos y a la vez el localstorage tal que exista persistencia de datos\n   //al refrescar la pagina:\n  const saveStateTodos = (newTodos) => {\n    localStorage.setItem('Version_1', JSON.stringify(newTodos));\n    setItem(newTodos);\n  }\n  return [item, saveStateTodos];  //saveStateTodos es el array persistente de todos, item es la lista de todos parseada\n}\n\n//Componente React\nfunction BackgroundImage () {\n  let [search, setSearch] = useState(\"\");\n  let [todos, saveStateTodos]= useLocalStorage([]);\n  console.log(saveStateTodos);\n  //Funcion para obtener la estadistica de cantidad de completados y totales\n  const reducedResult = todos.reduce((accumulator, currentTask) => {\n  accumulator.totalTasks++;\n  if (currentTask.estado === 'Completado') {\n    accumulator.completedTasks++;\n  }\n  return accumulator;\n  }, { totalTasks: 0, completedTasks: 0 });\n\n  // Filtra el array 'todos' basado en el valor de 'search'\n  const filteredTodos = todos.filter(todo => {\n    // Verifica si la tarea incluye la palabra introducida en 'search'\n    return todo.tarea.toLowerCase().includes(search.toLowerCase());\n  });\n\n  //Creamos la funcion para actualizar el estado del todo a completado para pasarselo al todoItem tal que al presionar el\n  //icono de tickeado aparezca completado\n  const CompletarTodo = (tarea) => {\n    const newTodos = [...todos];  //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(\n      (todo) => todo.tarea === tarea);\n    newTodos[todoIndex].estado = \"Completado\";  //cambiamos el estado del todo apretado\n    //setTodos(newTodos); -> antes de usar localstorage\n    saveStateTodos(newTodos);\n  }\n  //Creamos la funcion para actualizar el estado del vector todos a eliminar el todo al presionar el icono cancel en el todoItem\n  const eliminarTodo =(tarea) => {\n    let newTodos = [...todos];  //creamos un nuevo array con la lista de todos tal que podamos actualizarla\n    const todoIndex = newTodos.findIndex(\n      (todo) => todo.tarea === tarea);\n    if (todoIndex !== -1) {\n      newTodos.splice(todoIndex, 1); // Eliminamos el elemento en el índice todoIndex\n      //setTodos(newTodos); // Actualizamos el estado con el nuevo array sin el elemento; -> antes de usar localstorage\n      saveStateTodos(newTodos);\n    }\n  }\n\n  return (\n    <div className=\"background-image\">\n      <div className=\"todo-list-container\"> \n        <TodoCounter tasks={reducedResult.totalTasks} completed={reducedResult.completedTasks}/>\n        <TodoSearch \n          search={search} setSearch={setSearch}\n        />\n        <TodoList />\n          {filteredTodos.map(todo => (    //usamos el estado inicial de los todos para renderizarlos\n            <TodoItem key={todo.tarea} texto={todo.tarea} state={todo.estado} \n              onComplete={()=> CompletarTodo(todo.tarea)}\n              onDelete={()=> eliminarTodo(todo.tarea)}\n            />\n          ))}\n        <TodoList />\n        <CreateTodoButton />\n      </div>\n    </div>\n  );\n};\n\nexport default BackgroundImage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}